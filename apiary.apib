FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# icp-media-api

This is an ICP API documentation for so called "Media app".
This documentation was based on media app implemented in following repo: 
* https://github.com/MLS-ICP/media_person

## Uploading Resources [/uploads]

### Upload Image or Video Resource [POST]

Endpoint used to upload file resources, mostly images and videos but will work for any file resource.
Images can be uploaded:
* with param *iframeRemote* (true/false) to support iframe uploader (JavaScript library for easy upload)
* with additional header *Accept: text/vnd.fineuploader+plain* to support yet another JS uploader called FineUploader

After upload is done, the response is returned and it contains header *Location* with url to the uploaded asset.
Whenever one of above additional param/header is specified the response contains additionally a JSON object with more details.

+ Request

    + Headers
        
            Content-Type: multipart/form-data; boundary=---BOUNDARY
            Accept: text/vnd.fineuploader+plain

    + Attributes

        + iframeRemote: true/false (boolean) - iframe support for upload

    + Body

            -----BOUNDARY
            Content-Disposition: form-data; name="img"; filename="image.jpg"
            Content-Type: image/jpeg
            Content-Transfer-Encoding: base64
    
            /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
            HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
            MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
            AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
            AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
            -----BOUNDARY

+ Response 201 (text/plain)

    + Headers
        
            Location: http://test.com/image7198853861649760492.jpg
    
    + Body
            
            {
                "success" : true,
                "location" : "http://test.com/image7198853861649760492.jpg",
                "contentType" : "image/jpeg"
            }


## Converting Resources [/conversions]

### Convert Image Resource [POST]

Conversion is used to manipulate images, like cropping and resizing them. 
Internally, the endpoint is using *Image Magic* library (http://www.imagemagick.org/script/index.php).
To convert the image the request should have two params: *url* and *command*, 
where *url* is the location returned from */upload* endpoint and 
*command* is *Image Magic* command forwarded directly to library engine (http://www.imagemagick.org/script/command-line-processing.php#option).

Similarly to the */upload* endpoint, the response contains *Location* header with url of the converted image (new image is created).

+ Request

    + Headers
        
            Content-Type: x-www-form-urlencoded

    + Attributes

        + url: `http://test.com/image7198853861649760492.jpg` (string, required) - path to the image to convert
        + command: `-crop,378.2456140350877x378.2456140350877+136.16842105263157+34.04210526315789` (string, required) - comma-separated command line flags to imagemagick convert

+ Response 201 (text/plain)

    + Headers
        
            Location: http://test.com/image7198853861649760492232.jpg
            
## Compressing Resources [/compressions]

### Compress Image or Video Resource [POST]

Compression endpoint is designed to compress video resources. Similarly to */conversion* endpoint, 
it expects *url* location of a video asset, *targetFormat* which says how to compress resource 
and *targetFileName* which can force usage of specified file name (but it is no recommended, 
as it can conflict with existing file or hide file type from the user by changing output file extension).

The choice of *targetFormat* changes the behavior of */compressions* endpoint in a following ways:
* *jpeg* - used to create the screenshot of the video by using one frame from the video and saving it as a image file.
This works in a synchronous way. The response is HTTP 201 with *Location* header just like for other endpoints. 
Additionally, when converting to *jpeg* you can set *Prefer* header to get a copy of the image returned in the same HTTP response.
* *h264* - asynchronously compress the video with H264 codec. When specified the response also contains *Location* header but HTTP code is 202. 
Because it works synchronously, you need to poll the resource when compression is finished. Following video formats are allowed: avi|wmv|flv|mpg|mpeg|mp4|mov|m4v.
* *ogg* - asynchronously compress the video sound track to OGG. Response is also HTTP 202 with *Location* header. Polling required.

+ Request

    + Headers
        
            Content-Type: x-www-form-urlencoded
            Prefer: return=representation

    + Attributes

        + url: `http://test.com/video.mov` (string, required) - path to the video to compress
        + targetFormat: `h264` (string, required) - one of "h264", "ogg" (or "jpeg" for screenshot)
        + targetFilename: `video2.mov` (string) - force the output name, not recommended

+ Response 201 (text/plain)

    + Headers
        
            Location: http://test.com/image7198853861649760492232.jpg